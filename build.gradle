buildscript {
    ext{
        kotlin_version = '1.2.70'
    }

    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter/' }
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'https://plugins.gradle.org/m2/' }
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath("org.jetbrains.kotlin:kotlin-allopen:$kotlin_version")
        classpath 'nu.studer:gradle-jooq-plugin:3.0.2'
    }
}

apply plugin: "kotlin"
apply plugin: 'application'
apply plugin: 'nu.studer.jooq'

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter/' }
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url 'https://plugins.gradle.org/m2/' }
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    compile 'no.tornado:tornadofx:1.7.17'
    compile 'com.h2database:h2:1.4.197'
    compile("com.github.bkenn:kfoenix:0.1.2-SNAPSHOT")

//    compile group: 'com.jfoenix', name: 'jfoenix', version: '8.0.7'
    // https://mvnrepository.com/artifact/org.jooq/jooq
    compile 'org.jooq:jooq:3.11.5'

    jooqRuntime('com.h2database:h2:1.4.197')
    testCompile 'junit:junit:4.12'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile("org.jetbrains.kotlin:kotlin-reflect")
}

mainClassName = 'com.example.demo.app.MyApp'

jar {
    manifest {
        attributes(
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'com.example.demo.app.MyApp'
        )
    }
    from(configurations.compile.collect { entry -> zipTree(entry) }) {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }
}

jooq {
    version = '3.11.5'
    model(sourceSets.main) {
        jdbc {
            driver = 'com.mysql.cj.jdbc.Driver'
            url = 'jdbc:mysql://192.168.99.100:3306/test?useSSL=false&serverTimezone=CST'
            user = 'cmnt'
            password = 'cmnt'
            /*properties {
                property {
                    key = 'ssl'
                    value = 'true'
                }
            }*/
        }
        generator {
            name = 'org.jooq.codegen.JavaGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.mysql.MySQLDatabase'
                inputSchema = 'test'
                forcedTypes {
                    forcedType {
                        userType='com.fasterxml.jackson.databind.JsonNode'
                        binding = 'cn.zenliu.jooq.ext.mysql.JsonJsonNodeBinding'
                        expression = '.*'
                        types = 'JSON'
                    }
                }
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = true
                fluentSetters = true
                // ...
            }
            target {
                packageName = 'cn.zenliu.jooq.ext.model'
                directory = 'src/test/java'
            }
        }
    }
}
compileJava.dependsOn -= 'generateModelJooqSchemaSource'
